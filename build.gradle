buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id "com.palantir.docker" version "0.25.0"
    id "com.palantir.docker-run" version "0.25.0"
    id "org.sonarqube" version "2.7"
    //   id 'jacoco'
}

sonarqube {
    properties {
        property "sonar.projectName", "enactmentengine"
        // Check that this one is the same as the one used in the buildBreaker.py
        property "sonar.projectKey", "abo:enactmentengine"
        // URL of the sonarQube host (comment out when working with SonarQube in localhost)
        //property "sonar.host.url", "http://138.232.66.154:3000"
    }
}

// needed to prevent multiple bindings in the classpath
configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'
//jacoco {
//    toolVersion = "0.8.5"
//}

group = 'at.enactmentengine.serverless'

description = "enactment-engine"

mainClassName = 'at.enactmentengine.serverless.main.Service'

sourceCompatibility = '8'

repositories {
    mavenCentral()

    maven {
        name "jitpack"
        url 'https://jitpack.io'
    }
}
dependencies {
//    implementation 'com.github.stefanpedratscher:AFCLCore:v0.0.1'
//    implementation 'com.github.ApolloCEC:socketUtils:-SNAPSHOT'

    testImplementation group: 'junit', name: 'junit', version: '4.+'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.30.1'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.5'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.0.14'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
//    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.327'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.327'
    implementation group: 'com.cloudant', name: 'cloudant-client', version: '2.17.0'
//    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.8'
    //compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testImplementation group: 'junit', name: 'junit', version: '3.8.1'
    implementation fileTree(dir: 'externalJars', include: ['FTjFaaS.jar'])
    implementation fileTree(dir: 'externalJars', include: ['afclCore.jar'])
}

//jacocoTestReport {
//    reports {
//        xml.enabled true
//        html.enabled true
//    }
//}

shadowJar {
    archiveBaseName = 'enactment-engine-all'
    archiveClassifier = null
    archiveVersion = null
}

task standalone {
    mainClassName = 'at.enactmentengine.serverless.main.Local'
    dependsOn 'shadowJar'
}

task copyJar(type: Copy) {
    dependsOn 'shadowJar'
    from "build/libs/enactment-engine-all.jar"
    into './docker/Database/'
}

task copyDatabase(type: Copy) {
    mkdir "Database"
    from "Database"
    include "**"
    into './docker/Database'
}

task updateDocker(type: Copy) {
    dependsOn 'copyJar', 'copyDatabase'
}

docker {
    name "ee-service"
    dockerfile project.file('./docker/Dockerfile')
    files './docker/Database/enactment-engine-all.jar'
    copySpec.from("./Database").into("Database")
}

dockerRun {
    name "ee-service"
    image "ee-service"
    clean true
    //  arguments "--network=afclplatform" // the setting for the usage within the platform
    arguments "--network=afclplatform", "-p", "9000:9000"
}

task dockerupdate {
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'updateDocker'
    dependsOn 'docker'
    dependsOn 'dockerStop'
    dependsOn 'dockerRun'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('dockerRun').mustRunAfter 'dockerStop'
    tasks.findByName('dockerStop').mustRunAfter 'docker'
    tasks.findByName('docker').mustRunAfter 'updateDocker'
    tasks.findByName('updateDocker').mustRunAfter 'build'
}

